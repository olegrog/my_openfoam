/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  dev                                   |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         Euler;
}

gradSchemes
{
    default         Gauss linear;
}

divSchemes
{
    div(((rho*U)&devRhoReff))           Gauss linear;
    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;
    // limitedLinear <0..1> -- Koren limiter (more bounded)
    // linearUpwind grad(...) -- 2-order (less bounded)
    div(rhoPhi,U)                       Gauss limitedLinearV 1;
    div(rhoPhi,h)                       Gauss limitedLinear 1;
    div(phi,epsilon)                    Gauss upwind;
    div(phi,k)                          Gauss upwind;
    div(phi,T)                          Gauss upwind;
    div(phi,liquidFractionInMetal)      Gauss upwind;
}

laplacianSchemes
{
    default         Gauss linear limited corrected 0.333;
}

interpolationSchemes
{
    //default         linear;
    flux(U)                     linear;
    interpolate(nHat)           linear;
    interpolate(rho)            linear;
    interpolate(rAU)            linear;
    interpolate(kappa)          harmonic;
    interpolate(Cp)             linear;
    interpolate(vapourPressure) harmonic;
    dotInterpolate(S,U_0)       linear;
    interpolate((rho*rAU))      linear;
    flux(HbyA)                  linear;
    interpolate((sigma*interfaceProperties:K)) linear;
    interpolate(HsPrimeAlphaG)  linear;
    // in case of dynamicFvMesh only
    interpolate(U)              linear;
}

snGradSchemes
{
    default         limited corrected 0.333;
}

// ************************************************************************* //
